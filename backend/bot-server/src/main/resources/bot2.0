/**
 * 这里给出代码样例，你可以修改 getNextStep() 方法中的内容
 * <p>
 *  class GameSituation {
 *      private long userId;
 *      private Cell head;
 *      private String botCode;
 *      private String botCode;
 *      private int[][] gameMap;
 *      private int round;
 *      private LinkedList<Cell> body1, body2;
 *  }
 * <p>
 *  class Cell {
 *      private int x, y;
 *  }
 */

package com.kob.botserver.service.impl;

import static com.kob.common.constant.Constants.COLS;
import static com.kob.common.constant.Constants.ROWS;
import static com.kob.common.constant.Constants.UP;
import static com.kob.common.constant.Constants.dx;
import static com.kob.common.constant.Constants.dy;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import com.kob.common.model.dto.Cell;
import com.kob.common.model.dto.GameSituation;
import com.kob.common.util.GsonUtils;

/**
 * @author tongfs@stu.pku.edu.cn
 * @date 2023/2/4
 */
public class SupplierImpl implements java.util.function.Supplier<Integer> {

    @Override
    public Integer get() {
        File file = new File(this.getClass().getName());
        int result;
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            result = getNextStep(GsonUtils.fromJson(br.readLine(), GameSituation.class));
        } catch (IOException e) {
            e.printStackTrace();
            result = UP;
        }
        file.delete();
        return result;
    }

    /**
     * 获得下一步的具体方法
     */
    private int getNextStep(GameSituation gameSituation) {
        Cell head = gameSituation.getHead();
        int[][] gameMap = gameSituation.getGameMap();
        LinkedList<Cell> body1 = gameSituation.getBody1();
        LinkedList<Cell> body2 = gameSituation.getBody2();

        if (!isIncreasing(gameSituation.getRound())) {
            body1.poll();
            body2.poll();
        }

        updateMap(gameMap, body1, body2);

        int[] directions = new int[4];  // -1表示该方向不可走，非负表示选择该方向后下一步还有几个位置可走(0~3)
        int maxDirections = -1;  // 下下一步最多有几个位置可走
        for (int i = 0; i < 4; i++) {
            int a = head.getX() + dx[i];
            int b = head.getY() + dy[i];
            if (a >= 0 && a < ROWS && b >= 0 && b < COLS && gameMap[a][b] == 0) {
                directions[i] = explore(a, b, gameMap);
            } else {
                directions[i] = -1;
            }
            maxDirections = Math.max(maxDirections, directions[i]);
        }

        if (maxDirections == -1) return UP;

        Random random = new Random();
        while (true) {
            int d = random.nextInt(4);
            if (directions[d] == maxDirections) {
                return d;
            }
        }
    }

    /**
     * 当前回合蛇的身体是否要增长
     */
    private boolean isIncreasing(int round) {
        if (round <= 5) return true;
        if (round <= 11) return (round & 1) == 1;
        return round % 3 == 2;
    }

    /**
     * 更新地图
     */
    private void updateMap(int[][] gameMap, List<Cell> body1, List<Cell> body2) {
        for (Cell cell : body1) {
            gameMap[cell.getX()][cell.getY()] = 1;
        }
        for (Cell cell : body2) {
            gameMap[cell.getX()][cell.getY()] = 1;
        }
    }

    /**
     * 探索一下如果下一步走 (x, y)，则再下一步有多少个可选位置，将结果记录在
     */
    private int explore(int x, int y, int[][] gameMap) {
        int res = 0;
        for (int i = 0; i < 4; i++) {
            int a = x + dx[i], b = y + dy[i];
            if (a >= 0 && a < ROWS && b >= 0 && b < COLS && gameMap[a][b] == 0) {
                res++;
            }
        }
        return res;
    }
}
